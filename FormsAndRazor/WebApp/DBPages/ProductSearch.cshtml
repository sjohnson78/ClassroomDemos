@{
    Page.Title = "Product Search";
    Layout = "~/_LayoutPage.cshtml";

    var productsearch = Request.Form["ProductSearch"];

    var db = Database.Open("NWDB");

    // the line below has the potential to return all products if left empty, we can fix with this if statement, dont need if we use the other method below

    //if (string.IsNullOrEmpty(productsearch))
    //{
    //    productsearch = "zzzzzzzzzzzzzzzz"; // this just sets it up so that it will fail instead of returning all values
    //}

    var partialsearchstring = "%" + productsearch + "%";

    var queryStatement = "SELECT ProductID, ProductName Name, CategoryID, UnitPrice, UnitsInStock "
                        + "FROM Products "
                        + "WHERE ProductName like @0 "
                        + "ORDER BY ProductName";

}
@section banner{
    <h1>Product Search</h1>
}
<div class="form-group">
  
    <form id="theForm" action="" method="post">
        <div class="col-sm-3">
            <label id="forProductSearch">Product ID</label><br/>
            <input type="text" name="ProductSearch" value=" @productsearch"><br/><br/>
            <button type="submit" class="btn btn-primary" name="Search" id="theSearch">Search</button>
                    
        </div>
        <div class="col-sm-8">
            @if (IsPost)
            {
                if (productsearch.IsEmpty())
                {
                    <p><strong><span style="color:firebrick">Enter a product name (or partial name).</span></strong></p>
                }
                else
                {
                    var queryProducts = db.Query(queryStatement, partialsearchstring);
                    if (queryProducts.Count() == 0) // if no product is found... because this is here we don't necessarily need to use the if statement in the declared variables
                    {
                        <p><strong><span style="color:firebrick">Nothing found for search argument.</span></strong></p>
                    }
                    else
                    {
                        var grid = new WebGrid(queryProducts);
                        @grid.GetHtml("table table-bordered table-striped table-hover",
                        mode: WebGridPagerModes.All,
                        lastText: "Last",
                        firstText: "First",
                        columns: grid.Columns(
                        grid.Column(columnName: "ProductID", header: "ID"),
                        grid.Column(columnName: "Name"),
                        grid.Column(columnName: "CategoryID", header: "Cat"),
                        grid.Column(columnName: "UnitPrice", header: "$"),
                        grid.Column(columnName: "UnitsInStock", header: "UOS"),
                        grid.Column(header:"", format:@<text><a href="~/DBPages/ProductEdit.cshtml?pid=@item.ProductID">Edit</a></text>)
                        ));
                    }
                }
            }
        </div>
        @* since the webgrid is in the form (method:post), the webgrid's Get used
            for paging has a problem.
          the following script cause a post to happen on the webgrid's paging even 
            if the webgrid is not in a form, we don't need this
            it's necessary because we are using the "get" method, this forces it to resubmit the "get" as a "post"
            BE CAREFUL ABOUT EXTRA SPACES IN JAVASCRIPT
            *@
        <script type="text/javascript">
            var links = $('a[href*=page], a[href*=sort]'), form = $('form');
            links.click(function () {
                form.attr("action", this.href);
                $(this).attr("href","javascript:");
                form.submit();
            });
        </script>
    </form>
</div> 